(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./src/docs/mdx/ref.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js"),p=a("./node_modules/docz/dist/index.m.js"),m=a("./src/index.js"),c=a("./src/docs/components/Box.js");function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components,a=s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"ref"}},"ref"),o.a.createElement(r.MDXTag,{name:"h4",components:n,props:{id:"you-will-need-to-use-the-ref-callback-provided-by-react-trap"}},"You will need to use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h4"},"ref")," callback provided by ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h4"},"react-trap"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For example, this is how the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<Box />")," example is using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-trap"),":"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},'const Box = ({ isFocused, innerRef }) => (\n  <div ref={innerRef}>\n    {isFocused ? "I\'m focused" : "I\'m out of focus"}\n  </div>\n);\n')),o.a.createElement(p.Playground,{__position:0,__codesandbox:"undefined",__code:'<Trap event="mouseover">\n  {(trapped, ref) => <Box innerRef={ref} isFocused={trapped} />}\n</Trap>',__scope:{props:a,Trap:m.a,Box:c.a}},o.a.createElement(m.a,{event:"mouseover"},function(e,n){return o.a.createElement(c.a,{innerRef:n,isFocused:e})})),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"why-do-we-must-use-a-ref-prop"}},"Why do we must use a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"ref")," prop?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We could of wrapped the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"children")," with a DOM node like a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"div")," but we don't want to add unnecessary junk to the DOM.\nWe could also use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"findDOMNode")," API but ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/facebook/react/pull/13841"}},"it will get deprecated on future versions of react"),".  "),o.a.createElement(r.MDXTag,{name:"p",components:n},"There is a plan for ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/facebook/react/pull/13841#issuecomment-430066195"}},"supporting refs with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"React.Fragment"))," and when this will released we will probably change our API and the ref won't be mandatory."))}}}]);